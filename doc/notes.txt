//When the size of the product of subsets of X, and Y is sufficiently small, there exist low rank 
//separated approximation to the kernel.  This implies that the action of the kernel on the subset of 
//Y can be seen as a low rank matrix multiplied by a low rank vector.  For any pair of 
//boxes, the matrix is known.  Computing the low rank vector, whos entries are 
//called equivalent weights is difficult if the size of the subset of Y is too large.  On the other 
//hand, it is simple to compute the weights for a small subset of Y.  
//Consider a sequence of partitions  of X and Y.  These sequences should start with the entire set, and then 
//create finer and finer partitions.  For pairs between these partitions with the size of the pair being small
//there is a low rank approximation, and so an equivalent weight exist.  
//The idea of the butterfly is to compute the weights for a small subset of Y, and then
//recursively compute weights with the partition of Y getting coarser, and the partition of X finer.  
//Finaly, the partition of Y is simply all of Y, and we can find a low rank approximation for the action of the kernel on 
////all of Y.
//


//There exist low rank approximations to the partial sum when 
//summed over, and evaluated in a region whose area is less than 1/N^2
//The goal is to construct find these approximations for the entire sum and restrict where we evaluate to 
//a very small region.  This amounts to computing equivalent weights.  That is to say, we approximate the matrix 
//multiplication Ax by a low rank matrix A' applied to a low rank vector delta, so that
//Ax=A'delta for some rows.  The equivalent weights are not 
//trivial to compute, when the region we sum over is all space, but they are simple to compute when 
//there are only a few points to sum over.  The idea is to form a dyadic partition of X, and Y, and
//consider pairs of regions at different scales with sufficiently small area.
//We can use the weights from a lower level 
//to find the weights at a lower level. 
for the pairs with the smallest 
	//boxes in T_y, with the largest box in T_x.  There are N^2*q weights
	//Initialize equivalent weights.  delta_t^{AB}=exp(-iN^2phi(x0,yt))sum_{y\in B} L_t^B(y), where B is a box of size O(1/N X 1/N).
	//We need to get all the fine scale boxes in B, and need to be able to tell which points are in this box.







	       	//for every point in set of points we are integrating over, find the corresponding box that said point
		//is in at the fine scale.  
		//Then delta_t^{AB}=
		//go through all y in Y, and see which grid(B in the paper) they belong in at the finest scale in T_y, and find a low rank 
		//approximation for the restriction to the coarsest scale in T_X.  We assume the points are uniformly distributed in [0,1], and that there are N^2
		//for all of the
 
